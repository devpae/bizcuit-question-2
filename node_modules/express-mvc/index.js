var util = require('util'),
    events = require('events').EventEmitter,
    async = require("async"),
    fs = require("fs");
 
function ExpressMVC() {
    if(false === (this instanceof ExpressMVC)) {
        return new ExpressMVC();
    }
    events.call(this);
};
 
util.inherits(ExpressMVC, events);
 
ExpressMVC.prototype.configure = function(app) {
    self = this;
    self.app = app;
    async.parallel({
        "model": function(callback) {
            fs.readdir(process.cwd() + "/model", function(err, files) {
                if (err) {
                    callback(err, null);
                } else {
                    var names = {};
                    for (var i = 0; i < files.length; i++) {
                        var name = files[i].split(".");
                        name.pop();
                        name = name.join("");
                        names[name] = require(process.cwd() + "/model/" + files[i]);
                    }
                    callback(null, names);
                }
            });
        },
        "controller": function(callback) {
            fs.readdir(process.cwd() + "/controller", function(err, files) {
                if (err) {
                    callback(err, null);
                } else {
                    var names = {};
                    for (var i = 0; i < files.length; i++) {
                        var name = files[i].split(".");
                        name.pop();
                        name = name.join("");
                        names[name] = require(process.cwd() + "/controller/" + files[i]);
                    }
                    callback(null, names);
                }
            });
        },
        "config": function(callback) {
            fs.readdir(process.cwd() + "/config", function(err, files) {
                if (err) {
                    callback(err, null);
                } else {
                    var names = {};
                    for (var i = 0; i < files.length; i++) {
                        var name = files[i].split(".");
                        name.pop();
                        name = name.join("");
                        names[name] = require(process.cwd() + "/config/" + files[i]);
                    }
                    callback(null, names);
                }
            });
        }
    }, function(err, result) {
        if (err)
            throw new Error(err);

        global.mvc = result;   
        self.emit("ready");
    });
   
    return this;
};
 
ExpressMVC.prototype.start = function() {
    var self = this;
    for (var route in mvc.config.router) {
        self.app[mvc.config.router[route].method](route, mvc.controller[mvc.config.router[route].controller][mvc.config.router[route].action]);
    }
    if (typeof mvc.config.common.port === "number")
        self.app.listen(mvc.config.common.port);
    else
        self.app.listen(process.env[mvc.config.common.port]);
    
    return this;
};

module.exports = new ExpressMVC();